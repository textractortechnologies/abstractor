bundle exec rails console
require './lib/setup/setup/'
Abstractor::Setup.system
Setup.encounter_note
en = EncounterNote.create!(note_text: 'Bob is the patient.  He is doing better. KPS: 90.  Recommended an appointment in 6 months.')
en = EncounterNote.create!(note_text: 'Hello, I have no idea what is your KPS.')
en = EncounterNote.create!(note_text: 'Bob is the patient.  He is doing better. KPS: 90.  Recommended an appointment in 6 months.  I hope his kps will be 100 then.')
en.abstract
bundle exec rails server
http://0.0.0.0:3000/encounter_notes/1/edit
http://0.0.0.0:3000/encounter_notes/4/edit
http://0.0.0.0:3000/encounter_notes/5/edit
http://0.0.0.0:3000/encounter_notes/3/edit


Abstractor::Setup.system
require './lib/setup/setup/'
Setup.sites
Setup.custom_site_synonyms
Setup.site_categories
Setup.laterality
Setup.radiation_therapy_prescription
rtp = RadiationTherapyPrescription.create!(site_name: 'Looks like the left frontal lobe to me')
rtp.abstract
bundle exec rails server

http://0.0.0.0:3000/radiation_therapy_prescriptions/1/edit


Abstractor::Setup.system
require './lib/setup/setup/'
Setup.imaging_exam
ie = ImagingExam.create!(note_text: 'MRI looks good to me.')
ie.abstract
http://0.0.0.0:3000/imaging_exams/1/edit


Abstractor::Setup.system
require './lib/setup/setup/'
Setup.sites
Setup.custom_site_synonyms
Setup.site_categories
Setup.laterality
Setup.radiation_therapy_prescription
Setup.surgery
s = Surgery.create!(surg_case_id: 1, surg_case_nbr: 'OR-1', patient_id: 1)
sp = SurgicalProcedure.create!(surg_case_id: 1, description: 'Left temporal lobe resection', modifier: 'Left')
sp = SurgicalProcedure.create(surg_case_id: 1, description: 'Insert shunt', modifier: 'Left')
s.abstract
s = Surgery.create!(surg_case_id: 2, surg_case_nbr: 'OR-2', patient_id: 1)
s.abstract
ie = ImagingExam.create!(note_text: 'MRI looks good to me 1.', patient_id: 1, report_date: '1/1/2014', accession_number: '123')
ie = ImagingExam.create!(note_text: 'MRI looks good to me 2.', patient_id: 1, report_date: '5/1/2014', accession_number: '456')
ie = ImagingExam.create!(note_text: 'MRI looks good to me 3.', patient_id: 2, report_date: '8/1/2014', accession_number: '789')

spr = SurgicalProcedureReport.create!(note_text: 'Surgery went well 1.', patient_id: 1, report_date: '9/1/2013', reference_number: '111')
spr = SurgicalProcedureReport.create!(note_text: 'Surgery went well 2.', patient_id: 1, report_date: '10/1/2013', reference_number: '222')
spr = SurgicalProcedureReport.create!(note_text: 'Surgery went not so well me 3.', patient_id: 2, report_date: '11/1/2013', reference_number: '333')

http://0.0.0.0:3000/surgeries/1/edit



indirect_source_type = Abstractor::AbstractorAbstractionSourceType.where(name: 'indirect').first
list_object_type = Abstractor::AbstractorObjectType.where(value: 'list').first
value_rule = Abstractor::AbstractorRuleType.where(name: 'value').first
source_type_nlp_suggestion = Abstractor::AbstractorAbstractionSourceType.where(name: 'nlp suggestion').first
surgery_anatomical_location_group  = Abstractor::AbstractorSubjectGroup.create(name: 'Surgery Anatomical Location')

anatomical_location_abstractor_abstraction_schema = Setup.abstractor_abstraction_schema_anatomical_location
abstractor_subject = Abstractor::AbstractorSubject.create(subject_type: 'Surgery', abstractor_abstraction_schema: anatomical_location_abstractor_abstraction_schema)
Abstractor::AbstractorAbstractionSource.create(abstractor_subject: abstractor_subject, from_method: 'surgical_procedure_notes', abstractor_rule_type: value_rule, abstractor_abstraction_source_type: source_type_nlp_suggestion)
Abstractor::AbstractorSubjectGroupMember.create(abstractor_subject: abstractor_subject, abstractor_subject_group: surgery_anatomical_location_group, display_order: 1)

imaging_confirmed_extent_of_resection_abstraction_schema = Abstractor::AbstractorAbstractionSchema.create(predicate: 'has_imaging_confirmed_extent_of_resection', display_name: 'Extent of resection', abstractor_object_type: list_object_type, preferred_name: 'Extent of resection')
abstractor_object_value = Abstractor::AbstractorObjectValue.create(value: 'Gross total resection')
abstractor_object_value.save
Abstractor::AbstractorAbstractionSchemaObjectValue.create(abstractor_abstraction_schema: imaging_confirmed_extent_of_resection_abstraction_schema, abstractor_object_value: abstractor_object_value)
abstractor_object_value = Abstractor::AbstractorObjectValue.create(value: 'Subtotal resection')
abstractor_object_value.save
Abstractor::AbstractorAbstractionSchemaObjectValue.create(abstractor_abstraction_schema: imaging_confirmed_extent_of_resection_abstraction_schema, abstractor_object_value: abstractor_object_value)
abstractor_subject = Abstractor::AbstractorSubject.create(subject_type: 'Surgery', abstractor_abstraction_schema: imaging_confirmed_extent_of_resection_abstraction_schema)
Abstractor::AbstractorAbstractionSource.create(abstractor_subject: abstractor_subject, abstractor_abstraction_source_type: indirect_source_type, from_method: 'patient_imaging_exams')
Abstractor::AbstractorAbstractionSource.create(abstractor_subject: abstractor_subject, abstractor_abstraction_source_type: indirect_source_type, from_method: 'patient_surgical_procedure_reports')
Abstractor::AbstractorSubjectGroupMember.create(abstractor_subject: abstractor_subject, abstractor_subject_group: surgery_anatomical_location_group, display_order: 2)
